/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pillar Labs API
 * API documentation for Pillar Labs
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  Product,
  ProductInput,
  SearchProductsParams
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Retrieve a list of all products
 * @summary Get all products
 */
export const getAllProducts = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<Product[]>(
      {url: `/api/products`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllProductsQueryKey = () => {
    return [`/api/products`] as const;
    }

    
export const getGetAllProductsQueryOptions = <TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({ signal }) => getAllProducts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProducts>>>
export type GetAllProductsQueryError = unknown


export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all products
 */

export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllProductsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllProductsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({ signal }) => getAllProducts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllProductsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProducts>>>
export type GetAllProductsSuspenseQueryError = unknown


export function useGetAllProductsSuspense<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductsSuspense<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductsSuspense<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all products
 */

export function useGetAllProductsSuspense<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllProductsSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new product with the provided data
 * @summary Create a new product
 */
export const createProduct = (
    productInput: ProductInput,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<Product>(
      {url: `/api/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productInput, signal
    },
      );
    }
  


export const getCreateProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: ProductInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: ProductInput}, TContext> => {
    
const mutationKey = ['createProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProduct>>, {data: ProductInput}> = (props) => {
          const {data} = props ?? {};

          return  createProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductMutationResult = NonNullable<Awaited<ReturnType<typeof createProduct>>>
    export type CreateProductMutationBody = ProductInput
    export type CreateProductMutationError = void

    /**
 * @summary Create a new product
 */
export const useCreateProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: ProductInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createProduct>>,
        TError,
        {data: ProductInput},
        TContext
      > => {

      const mutationOptions = getCreateProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Search products by text query
 * @summary Search products
 */
export const searchProducts = (
    params: SearchProductsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<Product[]>(
      {url: `/api/products/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchProductsQueryKey = (params: SearchProductsParams,) => {
    return [`/api/products/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchProductsQueryOptions = <TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(params: SearchProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProducts>>> = ({ signal }) => searchProducts(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchProductsQueryResult = NonNullable<Awaited<ReturnType<typeof searchProducts>>>
export type SearchProductsQueryError = unknown


export function useSearchProducts<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProducts<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProducts<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search products
 */

export function useSearchProducts<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchProductsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchProductsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(params: SearchProductsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProducts>>> = ({ signal }) => searchProducts(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchProductsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof searchProducts>>>
export type SearchProductsSuspenseQueryError = unknown


export function useSearchProductsSuspense<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductsSuspense<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductsSuspense<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search products
 */

export function useSearchProductsSuspense<TData = Awaited<ReturnType<typeof searchProducts>>, TError = unknown>(
 params: SearchProductsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchProductsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a product by its ID
 * @summary Update a product
 */
export const updateProduct = (
    id: string,
    productInput: ProductInput,
 ) => {
      
      
      return axiosInstance<Product>(
      {url: `/api/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productInput
    },
      );
    }
  


export const getUpdateProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: string;data: ProductInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: string;data: ProductInput}, TContext> => {
    
const mutationKey = ['updateProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProduct>>, {id: string;data: ProductInput}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProduct(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductMutationResult = NonNullable<Awaited<ReturnType<typeof updateProduct>>>
    export type UpdateProductMutationBody = ProductInput
    export type UpdateProductMutationError = void

    /**
 * @summary Update a product
 */
export const useUpdateProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: string;data: ProductInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateProduct>>,
        TError,
        {id: string;data: ProductInput},
        TContext
      > => {

      const mutationOptions = getUpdateProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    